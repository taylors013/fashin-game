import React from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { motion } from "framer-motion";
import { useState, useEffect } from "react";
import { useDrop } from "react-dnd";
import { DndProvider, useDrag } from "react-dnd";
import { HTML5Backend } from "react-dnd-html5-backend";
import { Howl } from "howler";

const cities = [
  {
    name: "Paris",
    description: "–≠–ª–µ–≥–∞–Ω—Ç–Ω–æ—Å—Ç—å –∏ haute couture.",
    challenge: "–°–æ–±–µ—Ä–∏ –æ–±—Ä–∞–∑ –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤ –ü–∞—Ä–∏–∂–µ!",
  },
  {
    name: "Tokyo",
    description: "–£–ª–∏—á–Ω–∞—è –º–æ–¥–∞ –∏ –∫—ç–π-—Å—Ç–∏–ª–∏.",
    challenge: "–°–æ–∑–¥–∞–π —Å—Ç–∏–ª—å–Ω—ã–π –∫—ç–∂—É–∞–ª-–ª—É–∫ –¥–ª—è –•–∞—Ä–∞–¥–∑—é–∫—É!",
  },
  {
    name: "Milan",
    description: "–õ—é–∫—Å–æ–≤–∞—è –º–æ–¥–∞ –∏ —Ç—Ä–∞–¥–∏—Ü–∏–∏.",
    challenge: "–ù–∞–π–¥–∏ –∏–¥–µ–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–∑ –¥–ª—è –ø–æ–¥–∏—É–º–∞ –≤ –ú–∏–ª–∞–Ω–µ!",
  },
];

const wardrobe = [
  { id: 1, type: "top", name: "–ë–ª—É–∑–∫–∞" },
  { id: 2, type: "bottom", name: "–Æ–±–∫–∞" },
  { id: 3, type: "accessory", name: "–°—É–º–æ—á–∫–∞" },
  { id: 4, type: "top", name: "–ü–∏–¥–∂–∞–∫" },
  { id: 5, type: "bottom", name: "–ë—Ä—é–∫–∏" },
  { id: 6, type: "accessory", name: "–û—á–∫–∏" },
];

const stylistComments = [
  "–§–∞–Ω—Ç–∞—Å—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä! –í—ã–≥–ª—è–¥–∏—Ç —Å—Ç–∏–ª—å–Ω–æ –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ.",
  "–û—á–µ–Ω—å —Å–º–µ–ª—ã–π –æ–±—Ä–∞–∑ ‚Äî –∏–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –ø–æ–¥–∏—É–º–∞!",
  "–ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è —Å–æ—á–µ—Ç–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤. –¢—ã ‚Äî –Ω–∞—Å—Ç–æ—è—â–∏–π —Å—Ç–∏–ª–∏—Å—Ç!",
  "–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Å—Ç–∏–ª—å, –Ω–æ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —è—Ä–∫–∏–π –∞–∫—Ü–µ–Ω—Ç.",
];

function getRandomComment() {
  const index = Math.floor(Math.random() * stylistComments.length);
  return stylistComments[index];
}

function DraggableItem({ item }) {
  const [{ isDragging }, drag] = useDrag(() => ({
    type: "item",
    item,
    collect: (monitor) => ({
      isDragging: monitor.isDragging(),
    }),
  }));

  return (
    <div
      ref={drag}
      className={`p-2 m-2 border rounded-xl bg-gray-100 cursor-move ${
        isDragging ? "opacity-50" : ""
      }`}
    >
      {item.name}
    </div>
  );
}

function DropZone({ type, onDrop, children }) {
  const [{ isOver }, drop] = useDrop(() => ({
    accept: "item",
    drop: (item) => onDrop(item, type),
    collect: (monitor) => ({
      isOver: monitor.isOver(),
    }),
  }));

  return (
    <div
      ref={drop}
      className={`min-h-[80px] p-4 border-dashed border-2 rounded-xl transition-all ${
        isOver ? "bg-green-100 border-green-500" : "border-gray-300"
      }`}
    >
      <p className="text-sm text-muted-foreground mb-2">{type.toUpperCase()}</p>
      {children}
    </div>
  );
}

export default function FashionQuest() {
  const [currentCity, setCurrentCity] = useState(null);
  const [outfit, setOutfit] = useState({ top: null, bottom: null, accessory: null });
  const [showFeedback, setShowFeedback] = useState(false);
  const [feedbackText, setFeedbackText] = useState("");

  useEffect(() => {
    const bgMusic = new Howl({
      src: ["/music/fashion-show.mp3"],
      loop: true,
      volume: 0.3,
    });
    bgMusic.play();
    return () => bgMusic.stop();
  }, []);

  const handleDrop = (item, type) => {
    if (item.type === type) {
      setOutfit((prev) => ({ ...prev, [type]: item }));
    }
  };

  const handleShow = () => {
    if (outfit.top && outfit.bottom && outfit.accessory) {
      setFeedbackText(getRandomComment());
      setShowFeedback(true);
    } else {
      alert("–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–±–µ—Ä–∏ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –æ–±—Ä–∞–∑–∞!");
    }
  };

  const handleReset = () => {
    setOutfit({ top: null, bottom: null, accessory: null });
    setShowFeedback(false);
    setFeedbackText("");
  };

  return (
    <DndProvider backend={HTML5Backend}>
      <div className="p-6 max-w-5xl mx-auto text-center">
        <h1 className="text-4xl font-bold mb-4">üåç Fashion Quest</h1>
        <p className="mb-6 text-lg text-muted-foreground">
          –û—Ç–ø—Ä–∞–≤—å—Å—è –≤ —Å—Ç–∏–ª—å–Ω–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –ø–æ –º–æ–¥–Ω—ã–º —Å—Ç–æ–ª–∏—Ü–∞–º –º–∏—Ä–∞!
        </p>

        {!currentCity && (
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            {cities.map((city) => (
              <motion.div
                key={city.name}
                whileHover={{ scale: 1.05 }}
                className="cursor-pointer"
                onClick={() => setCurrentCity(city)}
              >
                <Card>
                  <CardContent className="p-4">
                    <h2 className="text-xl font-semibold">{city.name}</h2>
                    <p className="text-sm text-muted-foreground">{city.description}</p>
                  </CardContent>
                </Card>
              </motion.div>
            ))}
          </div>
        )}

        {currentCity && (
          <motion.div
            initial={{ opacity: 0, y: 30 }}
            animate={{ opacity: 1, y: 0 }}
            className="mt-8 p-6 border rounded-2xl shadow-xl bg-white"
          >
            <h3 className="text-2xl font-bold mb-2">{currentCity.name}</h3>
            <p className="text-lg mb-4">{currentCity.challenge}</p>

            <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-left">
              <div>
                <h4 className="font-semibold mb-2">–ì–∞—Ä–¥–µ—Ä–æ–±</h4>
                {wardrobe.map((item) => (
                  <DraggableItem key={item.id} item={item} />
                ))}
              </div>

              <div className="md:col-span-2 grid grid-cols-1 md:grid-cols-3 gap-4">
                <DropZone type="top" onDrop={handleDrop}>
                  {outfit.top && <p>{outfit.top.name}</p>}
                </DropZone>
                <DropZone type="bottom" onDrop={handleDrop}>
                  {outfit.bottom && <p>{outfit.bottom.name}</p>}
                </DropZone>
                <DropZone type="accessory" onDrop={handleDrop}>
                  {outfit.accessory && <p>{outfit.accessory.name}</p>}
                </DropZone>
              </div>
            </div>

            <div className="mt-6 flex flex-wrap gap-4 justify-center">
              <Button onClick={handleShow}>–ú–æ–¥–Ω—ã–π –ø–æ–∫–∞–∑</Button>
              <Button variant="outline" onClick={() => setCurrentCity(null)}>
                –ù–∞–∑–∞–¥ –∫ –∫–∞—Ä—Ç–µ
              </Button>
              <Button variant="ghost" onClick={handleReset}>
                –°–±—Ä–æ—Å–∏—Ç—å –æ–±—Ä–∞–∑
              </Button>
            </div>

            {showFeedback && (
              <motion.div
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                className="mt-6 p-4 bg-pink-50 border border-pink-300 rounded-xl"
              >
                <h4 className="text-lg font-semibold mb-2">üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å—Ç–∏–ª–∏—Å—Ç–∞:</h4>
                <p>{feedbackText}</p>
              </motion.div>
            )}
          </motion.div>
        )}
      </div>
    </DndProvider>
  );
}
